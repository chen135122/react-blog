{"version":3,"sources":["serviceWorker.js","login/login.js","header/head.js","router/route.js","index.js"],"names":["Boolean","window","location","hostname","match","history","createHashHistory","LoginForm","propos","state","username","password","code","e","preventDefault","push","className","alt","src","name","placeholder","maxLength","type","autoComplete","defaultValue","this","style","opacity","right","top","id","value","onClick","userOnClick","height","width","marginLeft","React","Component","Header","Layout","Content","Footer","NavHead","position","zIndex","theme","mode","defaultSelectedKeys","lineHeight","Item","key","padding","marginTop","margin","background","minHeight","textAlign","BasicRoute","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a9ebd20.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport {createHashHistory} from \"history\";\n\n\nconst history = createHashHistory();\n\nclass LoginForm extends React.Component{\n    constructor(propos){\n        super(propos);\n        this.state = {\n            username: '',\n            password: '',\n            code: '',\n        }\n    }\n    userOnClick(e){\n        e.preventDefault();\n        history.push('/home')\n    };\n    render() {\n        return (\n            <div>\n                <div className='login'>\n                    <div className='login_title'>\n                        <span>管理员登录</span>\n                    </div>\n                    <div className='login_fields'>\n                        <div className='login_fields__user'>\n                            <div className='icon'>\n                                <img alt=\"\" src='img/user_icon_copy.png'/>\n                            </div>\n                            <input name=\"login\" placeholder='用户名' maxLength=\"16\" type='text' autoComplete=\"off\"\n                                   defaultValue={this.state.username}/>\n                            <div className='validation'>\n                                <img alt=\"\" src='img/tick.png'/>\n                            </div>\n                        </div>\n                        <div className='login_fields__password'>\n                            <div className='icon'>\n                                <img alt=\"\" src='img/lock_icon_copy.png'/>\n                            </div>\n                            <input name=\"pwd\" placeholder='密码' maxLength=\"16\" type='text' autoComplete=\"off\" defaultValue={this.state.password}/>\n                            <div className='validation'>\n                                <img alt=\"\" src='img/tick.png'/>\n                            </div>\n                        </div>\n                        <div className='login_fields__password'>\n                            <div className='icon'>\n                                <img alt=\"\" src='img/key.png'/>\n                            </div>\n                            <input name=\"code\" placeholder='验证码' maxLength=\"4\" type='text' name=\"ValidateNum\"\n                                   autoComplete=\"off\" defaultValue={this.state.code}/>\n                            <div className='validation' style={{opacity: '1', right: '-5px', top: '-3px'}}>\n                                <canvas className=\"J_codeimg\" id=\"myCanvas\">\n                                    对不起，您的浏览器不支持canvas，请下载最新版浏览器!\n                                </canvas>\n                                {/*<canvas className=\"J_codeimg\" id=\"myCanvas\"*/}\n                                {/*        onClick=\"Code();\">对不起，您的浏览器不支持canvas，请下载最新版浏览器!*/}\n                                {/*</canvas>*/}\n                            </div>\n                        </div>\n                        <div className='login_fields__submit'>\n                            <input type='button' value='登录' onClick={this.userOnClick}/>\n                        </div>\n                    </div>\n                    <div className='success'>\n                    </div>\n                    <div className='disclaimer'>\n                        <p>欢迎登陆后台管理系统</p>\n                    </div>\n                </div>\n                <div className='authent'>\n                    <div className=\"loader\" style={{height: '44px',width: '44px',marginLeft: '28px'}}>\n                        <div className=\"loader-inner ball-clip-rotate-multiple\">\n                            <div> </div>\n                            <div> </div>\n                            <div> </div>\n                        </div>\n                    </div>\n                    <p>认证中...</p>\n                </div>\n                <div className=\"OverWindows\"> </div>\n            </div>\n        );\n    }\n};\n\nexport default LoginForm;\n","/* eslint-disable */\n\nimport React from \"react\";\nimport { Layout, Menu, Breadcrumb } from 'antd';\n\nconst { Header, Content, Footer } = Layout;\n\nconst NavHead = () => {\n    return (\n        <Layout>\n            <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }} id={'components-layout-demo-fixed'}>\n                <div className=\"logo\" />\n                <Menu\n                    theme=\"dark\"\n                    mode=\"horizontal\"\n                    defaultSelectedKeys={['2']}\n                    style={{ lineHeight: '64px' }}\n                >\n                    <Menu.Item key=\"1\">nav 1</Menu.Item>\n                    <Menu.Item key=\"2\">nav 2</Menu.Item>\n                    <Menu.Item key=\"3\">nav 3</Menu.Item>\n                </Menu>\n            </Header>\n            <Content style={{ padding: '0 50px', marginTop: 64 }}>\n                <Breadcrumb style={{ margin: '16px 0' }}>\n                    <Breadcrumb.Item>Home</Breadcrumb.Item>\n                    <Breadcrumb.Item>List</Breadcrumb.Item>\n                    <Breadcrumb.Item>App</Breadcrumb.Item>\n                </Breadcrumb>\n                <div style={{ background: '#fff', padding: 24, minHeight: 380 }}>Content</div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\n        </Layout>\n    );\n};\n\nexport default NavHead;","import React from \"react\";\nimport {HashRouter, Route} from \"react-router-dom\";\nimport LoginForm from \"../login/login\";\nimport NavHead from \"../header/head\";\n\n\nconst BasicRoute = () => {\n    return (\n        <HashRouter>\n            <Route exact path=\"/\" component={LoginForm} />\n            <Route path=\"/home\" component={NavHead}/>\n        </HashRouter>\n    );\n};\n\nexport default BasicRoute;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\n// import './App.css';\nimport * as serviceWorker from './serviceWorker';\nimport BasicRoute from \"./router/route\";\n\nReactDOM.render(<BasicRoute />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}